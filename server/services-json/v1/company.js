//=============================================================================
// COMPANY SERVICE
//=============================================================================
'use strict';

var prop = require('app-config');
var i18n = require('i18n');
var jsonUtils = require('../../utils/json-utils');
var defaultStorage = require('../../database/default-storage');
var CompanySchema = require('./schemas/company-schema');
var CompanyService = {};

/**
 * Find one company by id.
 * @param req - HTTP Request object.
 * @param res - HTTP Response object.
 * @param next - Node next function.
 * @return Company found in database.
 */
CompanyService.findById = function(req, res, next) {

  defaultStorage.findById(req.params.id, CompanySchema, function(err, company) {
    if (err) {
      return jsonUtils.returnError(prop.config.http.internal_server_error, i18n.__('validation').company_findById_failed, '[CompanyService.findById]', next, err);
    } else {
      if (!company) {
        return jsonUtils.returnError(prop.config.http.bad_request, i18n.__('validation').company_not_found, '[CompanyService.findById]', next, err);
      }
      return jsonUtils.returnSuccess(null, company, res, next);
    }
  });
};

/**
 * Find all companies.
 * @param req - HTTP Request object.
 * @param res - HTTP Response object.
 * @param next - Node next function.
 * @return All companies found in database.
 */
CompanyService.findAll = function(req, res, next) {
  defaultStorage.findAll(req.query, CompanySchema, function(err, companies) {
    if (err) {
      return jsonUtils.returnError(prop.config.http.internal_server_error, i18n.__('validation').company_findAll_failed, '[CompanyService.findAll]', next, err);
    } else {
      return jsonUtils.returnSuccess(null, companies, res, next);
    }
  });
};

/**
 * Save one company.
 * @param req - HTTP Request object.
 * @param res - HTTP Response object.
 * @param next - Node next function.
 * @return Company id generated by application.
 */
CompanyService.save = function(req, res, next) {

  defaultStorage.save(new CompanySchema(req.body), function(err, companyCallback) {
    if (err) {
      return jsonUtils.returnError(prop.config.http.bad_request, i18n.__('validation').company_save_failed, '[CompanyService.save]', next, err);
    } else {
      return jsonUtils.returnSuccess(companyCallback.id, null, res, next);
    }
  });
};

/**
 * Update one company.
 * @param req - HTTP Request object.
 * @param res - HTTP Response object.
 * @param next - Node next function.
 * @return Updated company id.
 */
CompanyService.update = function(req, res, next) {

  new CompanySchema(req.body).validate(function(err) {
    if (err) {
      return jsonUtils.returnError(prop.config.http.bad_request, i18n.__('validation').company_update_failed, '[CompanyService.update]', next, err);
    } else {
      defaultStorage.findByCriteria({
        $or: [{
          'name': req.body.name
        }, {
          'cnpj': req.body.cnpj
        }, {
          'externalCompanyId': req.body.externalCompanyId
        }]
      }, CompanySchema, function(err, company) {
        if (err) {
          return jsonUtils.returnError(prop.config.http.internal_server_error, i18n.__('validation').company_internal_error_findByCriteria, '[CompanyService.update]', next, err);
        } else {
          console.log(company);
          if (!company) {
            return jsonUtils.returnError(prop.config.http.bad_request, i18n.__('validation').company_not_found, '[CompanyService.update]', next);
          } else {
            if (company._id.toString() !== req.params.id.toString()) {
              return jsonUtils.returnError(prop.config.http.bad_request, i18n.__('validation').company_update_cnpj_name_externalCompanyId_duplicated, '[CompanyService.update]', next);
            } else {
              req.body.changeDateTime = new Date().getTime();
              defaultStorage.update(company.id, req.body, CompanySchema, function(err) {
                if (err) {
                  return jsonUtils.returnError(prop.config.http.bad_request, i18n.__('validation').company_update_failed, '[CompanyService.update]', next, err);
                } else {
                  return jsonUtils.returnSuccess(req.params.id, null, res, next);
                }
              });
            }
          }
        }
      });
    }
  });
};

module.exports = CompanyService;